.data

welcome:   .asciiz "\nSmart Refrigerator\n"
home: .asciiz "Choose option:"
option: .asciiz "\n(1)Display item    (2)Update    (3)Exit\n"
fetchoutmsg: .asciiz"\nPut negative (-) value for fetched out." 

string: .space 20 		#The string  array size 20

strToCompare: .asciiz "12345\n"
msg1: .asciiz "Enter password: "
msg4: .asciiz "Password is Incorrect!\n"
msg3: .asciiz "Password is correct!\n"
endline: .asciiz "\n" 

#list of inventory
nugget: .asciiz "\n1) rice   "
noodle: .asciiz "\n2) noodle   "
chicken: .asciiz "\n3) chicken   "
fish: .asciiz "\n4) fish   "
meat: .asciiz "\n5) meat   "
chocolate: .asciiz "\n6) water   " 
fruit: .asciiz "\n7) fruit   "
vegetables: .asciiz "\n8) vegetables   "

inventory: .word nugget, noodle, chicken, fish, meat, chocolate, fruit, vegetables		#array of inventory list
quantity: .word 15, 14, 5, 21, 8, 9, 12, 7					        #array of quantity list		

iterator:	.word 0		#first index of array
size:		.word 7	      	#last index of array



.text
main:
 #size of inventory array       
        la $t0, inventory
        la $t1, quantity
        lw $t2, iterator
        lw $t3, size
        
	li $v0, 4       	# print welcome msg
        la $a0, welcome  
        syscall 

        li $v0, 4		# print option msg
        la $a0, option
        syscall

        li $v0, 4		# print insruction msg
        la $a0, home
        syscall
        
        addi $t4, $zero, 1
        addi $t5, $zero, 2
        addi $t9, $zero, 3
        li $v0, 5		#get input option
        syscall
        
	move $t6, $v0		#store in t0
        beq $t4, $t6, displayInventory	#compare input element. if 1 go to display inventory list. else to to fetch
        beq $t5, $t6, authenticate
 	beq $t9, $t6, endProgram 
 
 displayInventory: 		#print elements in inventory array  
 
        #for() loop 
	bgt $t2, $t3, main
	sll $t7, $t2, 2		#t4= 4xi
	addu $t7, $t7, $t0 	#4i=4i + memory location of inventory array
	sll $t8,  $t2, 2	#loop for quantity
	addu $t8, $t8, $t1
	
	li $v0, 4		#print index element in array
	lw $a0, 0($t7)
        syscall
        
        li $v0, 1		#print index element in array
	lw $a0, 0($t8)
        syscall
        
        addi $t2, $t2, 1      
        j displayInventory	#loop array to other index element until bgt instruction complete

fetchItem:
	li $v0,4
	la $a0, fetchoutmsg
	syscall
	
	la $t0, inventory
	la $t1, quantity
	
	li $v0, 4		 #input +value for add,-value for sub
	lw $a0, 0($t0)
        syscall        
        li $v0,5
        syscall
        lw $a1, 0($t1)
        add $a1, $a1, $v0
        sb $a1, 0($t1)
    
	li $v0, 4		
	lw $a0, 4($t0)
        syscall
        li $v0,5
        syscall
        lw $a1, 4($t1)
        add $a1, $a1, $v0
        sb $a1, 4($t1)

	li $v0, 4		
	lw $a0, 8($t0)
        syscall
        li $v0,5
        syscall
        lw $a1, 8($t1)
        add $a1, $a1, $v0
        sb $a1, 8($t1)
        
        li $v0, 4		
	lw $a0, 12($t0)
        syscall
        li $v0,5
        syscall
        lw $a1, 12($t1)
        add $a1, $a1, $v0
        sb $a1, 12($t1)
        
        li $v0, 4		
	lw $a0, 16($t0)
        syscall
        li $v0,5
        syscall
        lw $a1, 16($t1)
        add $a1, $a1, $v0
        sb $a1, 16($t1)	
        
       	li $v0, 4		
	lw $a0, 20($t0)
        syscall
        li $v0,5
        syscall
        lw $a1, 20($t1)
        add $a1, $a1, $v0
        sb $a1, 20($t1)	
        
     	li $v0, 4		
	lw $a0, 24($t0)
        syscall
        li $v0,5
        syscall
        lw $a1, 24($t1)
        add $a1, $a1, $v0
        sb $a1, 24($t1)	
        
        li $v0, 4		
	lw $a0, 28($t0)
        syscall
        li $v0,5
        syscall
        lw $a1, 28($t1)
        add $a1, $a1, $v0
        sb $a1, 28($t1)	
        

        		
	jal main



authenticate:

        li $v0, 4    #load message for "Enter Password"
        la $a0, msg1
        syscall

        li $v0, 8    #Input password from user
        la $a0, string
        li $a1, 99
        syscall
        
        la $t1, string        #load address for string1
        la $t2, strToCompare  #load address for strToCompare
        jal correct
        beq $v0,$zero,ok 	#check result	

loop:
        lb $t3, 0($t1)        #load each bits 
        lb $t4, 0($t2)
        sub $t6, $t3, $t4     # t6 = t3 - t4
        beq $t6, $zero, continueEqual #if t6 = 0, continue
        j end_loop                    #if not equal, stop loop

continueEqual:

        beq $t3, $t5, end_loop # continue again, by incrementing both address by one
        addi $t1, $t1, 1
        addi $t2, $t2, 1
        j loop

end_loop:

        beq $t6, $zero, correct

incorrect:
        li $v0, 4   #display message "Password is Incorrect"
        la $a0, msg4
        syscall

        j authenticate

correct:
        li $v0, 4    #display message "Password is correct"
        la $a0, msg3
        syscall


printResult:

        li $v0, 1
        move $a0, $t6
        syscall

        li $v0, 4
        la $a0, endline
        syscall
	
ok:
	li $v0,4
	la $a0,msg3
	syscall
	jal fetchItem	

exit:
	li $v0,10
	syscall

endProgram:
	li $v0, 10
	syscall

